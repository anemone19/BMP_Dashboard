[["index.html", "BMP Dashboard Manual 1 Hi :) 1.1 Owners", " BMP Dashboard Manual An√© Cloete 2023-10-12 1 Hi :) Everything you need to know to takeover the maintaining and building of the BMP dashboard is in this bookdown. The first chapter will outline the R project folder structure and contents and then in Chapter two I‚Äôll talk about how to get the biodiversity data form OneDrive and prepare the data for the dashboard. The remaining chapters will delve into the code itself. Before starting, here is a short list of handy resources: R Shiny # 1 Shiny # 2 Github Bookdown (if you want to know how to make something like this). HTML and CSS These are big and comprehensive resources that will aid you along the way. But remember google and stackoverflow are your best friends! And ChatGPT might become your closest and most frustrating colleague. 1.1 Owners An√© Cloete (2023) If you are the new dashboard manager, add your name as well! All you need to do is open the bookdown project and navigate to the ‚Äúindex.Rmd‚Äù file and scroll down till you see this section. In the next chapter you‚Äôll see where this folder is located. Remember the dashboard is work in progress, so feel free to change and modify it as you like and most importantly have fun with it! Let‚Äôs begin! "],["files-within-folders-and-folders-within-files-and-more-files.html", "2 Files within folders and folders within files and more files 2.1 Biodiversity KPI mapping Master 2.2 BMPDashboard", " 2 Files within folders and folders within files and more files Let‚Äôs go over all the files and folders you‚Äôve now gotten access to starting with the OneDrive Folder. 2.1 Biodiversity KPI mapping Master This is, as it‚Äôs name suggests, the master folder! And all the NB things are stored here, this is what you should see (unless more folders have been added since the creation of this bookdown üòÖ). But don‚Äôt fret, you probably know about these folders already and the most important folders for the dashboard are: Team_Data, Survey_Photos and Biodiversity Survey Master. 2.1.1 Biodiversity Survey Master Here is where all the students upload their biodiversity data. Each student has their own folder labelled with their names and within each folder all the geopackages for each taxa they have collected data on is stored (plus another folder containing backups), e.g.¬† If you don‚Äôt know what a geopackage is, here‚Äôs a quick description: A GeoPackage is like a supercharged file for maps and location data. It‚Äôs a clever way to bundle up all sorts of info‚Äîlike where things are on a map, pictures, and details about those things. Think of it as a digital suitcase for geography. What makes it cool is that it works on different devices and software without any fuss. 2.1.2 Team_Data This folder contains photos of each student and a word document containing their ‚ÄúAbout Me‚Äù descriptions used in the dashboard. The nomenclature and file type is important here. The photo mus‚Äùt be saved with their name as the file name and they should be jpg‚Äôs! Then the word document should be called ‚Äústudent_aboutme‚Äù - you can change it if you want, but then you have to change it in the dashboard code as well. Within the document the student descriptions are paragraphs and within the first sentence the student introduces themselves with their names - this is NB. The code will will separate the text into paragraphs and then filter for the student by searching for their name. It‚Äôs your job to tell everyone to stick to this format and style! 2.1.3 Survey_Photos All the photos taken while surveying are uploaded here with their unique photo ID as file name. The file name isn‚Äôt super important for the dashboard as long as it‚Äôs consisted between their records and the uploaded data. Ensure that all the photos are in the same format (i.e.¬†jpg) - if not then there is a way to convert them all in one go which I‚Äôll mention later. 2.2 BMPDashboard Here is what you should see: BMPDashboard_Manual folder BMP_Dashboard.Rproj RemoteDataPullPrepare.R global.R server.R ui.R Modules folder rsconnect folder (you‚Äôll only see this once you‚Äôve published the app to shinyapps.io) TabItems folder www folder README.md packages.R If you‚Äôre familiar with R projects and shiny apps then this should look familiar barring the obvious extras such the as the first folder (which contains the code for this bookdown). Let‚Äôs quickly go over the rest. 2.2.1 RemoteDataPullPrepare.R This contains the code for pulling the data from OneDrive and preparing it. 2.2.2 global.R, ui.R and server.R These are the main shiny app files! 2.2.3 TabItems Contains the ui code for each tab in the dashboard (Tab_About.R, Tab_KPI.R, Tab_Record_Finder.R, Tab_Student_Engagement.R and Tab_Taxa_Explorer.R). I‚Äôve done this mostly to keep the ui file clean and comprehensible, but it‚Äôs slightly annoying for work flow as when you make a change here, you have close the app and then run it again. You could put all the code into the ui script and then if you make changes you only have to reload the app. Up to you! 2.2.4 Modules Contains the code for a custom valuebox which is used throughout the dashboard which I‚Äôve turned into a shiny module. A Shiny module is like a neat toolkit for creating specific interactive parts of your app without making a mess of your code. It‚Äôs like having a mini-app inside your bigger app. So, let‚Äôs say you want a snazzy chart or a dynamic table‚Äîyou can build that as a Shiny module. It keeps things organized and clean, making your web development life easier. It‚Äôs like having building blocks for your website, and each block (or module) does a special job, making your site more interactive and user-friendly. At the moment I‚Äôve only converted the valuebox into a module, but there are other things that can be turned into modules too! Like the datatables or the bar graphs. Feel free to play around with this! 2.2.5 www The www folder is like the storage room of your shiny app where you keep all the stuff that makes the outside look awesome. In the www folder, you put things like images, stylesheets (which control how things look), and JavaScript files (for extra functionality). In our www folder you‚Äôll find: all the survey photos a custom css stylesheet (custom.css) a copy of the Team_Data folder with additional objects: doc_parts.RData and student_text_sep.RData the allyears.RData object (this is the cleaned dataset which the dashboard uses) 2.2.6 README.md This a plain text file usually written in a simple format called Markdown that contains the description you see on github. 2.2.7 packages.R This r script contains all code to install and load all the packages required for the dashboard. "],["the-data.html", "3 The Data 3.1 Setting up OneDrive 3.2 Getting the data 3.3 Data cleaning and preparation 3.4 Pulling photos and documents from OneDrive 3.5 Things to think about", " 3 The Data 3.1 Setting up OneDrive The following instructions are for Mac users. If you are using windows, you should have OneDrive already installed on your computer. Download OneDrive: Go to the Mac App Store on your laptop. Search for ‚ÄúOneDrive.‚Äù Click on ‚ÄúGet‚Äù or ‚ÄúInstall‚Äù to download the OneDrive app. Install OneDrive: Once downloaded, open your Applications folder and locate the OneDrive app. Drag the OneDrive app to your Dock for easier access (optional). Sign In: Open the OneDrive app. Sign in with your university account. Follow the on-screen prompts to set up OneDrive. Choose Folders to Sync: Once signed in, you‚Äôll have the option to choose which folders from your OneDrive cloud storage you want to sync with your Mac. Select the folders you want or choose to sync everything. Set OneDrive Preferences: Click on the OneDrive icon in the Mac menu bar at the top of your screen. Click on the three dots (More) and select ‚ÄúPreferences.‚Äù Here, you can adjust settings like: Starting OneDrive automatically when you sign in to your Mac. Choosing how files are downloaded or uploaded (e.g., over metered networks). Setting up file on-demand (allows you to see all your files without having them downloaded). Accessing Your Files: A OneDrive folder will now be present in your Mac‚Äôs Finder. This folder will sync with your online OneDrive storage. Any files or folders you add to this folder will be automatically uploaded to the cloud, and any changes you make to files in this folder will be reflected in the cloud version. Read that again! It important that you know that if you change or delete any files in the OneDrive folder on your laptop it will affect the database online. To Unlink or Sign Out: If you ever wish to unlink your account or sign out, click on the OneDrive icon in the Mac menu bar. Click on the three dots (More) and select ‚ÄúPreferences.‚Äù Go to the ‚ÄúAccount‚Äù tab and select ‚ÄúUnlink this Mac.‚Äù 3.2 Getting the data First, navigate to the R script called ‚Äúpackages‚Äù to check whether you have all the required packages, if you don‚Äôt the script will also install and load them for you. Done! Now, open the script ‚ÄúRemoteDataPull_Prepare‚Äù. The most important first step here is to modify the object ‚Äúpath_to_master‚Äù with the filepath to where ever you have the OneDrive folder on your device and specifically to the main survey folder ‚ÄúBiodiversity Survey Master‚Äù. If you are using a Mac, navigate to the folder in Finder and then in the bottom panel (see below), right click the folder name and select ‚ÄúCopy‚Äùfolder name‚Äù as Pathname‚Äù. Let‚Äôs break down the code: Setting the Path to the Master Directory: path_to_master &lt;- &quot;/Users/anecloete/Library/CloudStorage/OneDrive-UniversityofStAndrews/Biodiversity KPI mapping Master&quot; This line sets a variable called path_to_master to the path of the main directory where the geopackage files are located. Paste the pathname you copied here. Obtaining All Geopackage Files: all_gpkgs &lt;- list.files( path = paste0(path_to_master,&quot;/Biodiversity Survey Master&quot;), recursive = TRUE, pattern = &quot;\\\\.gpkg$&quot;, full.names = TRUE ) This code lists all files with the ‚Äú.gpkg‚Äù extension in the specified directory and its subdirectories. - The path argument specifies where to look. - recursive set to TRUE means it will look in subdirectories as well. - pattern filters for files ending with ‚Äú.gpkg‚Äù. - full.names set to TRUE ensures the full path of each file is returned, not just its name. Filtering Geopackages with ‚ÄòHabitat_Polygon‚Äô in Their Name: survey_polygons &lt;- all_gpkgs[grepl(&quot;Habitat_Polygon&quot;, all_gpkgs)] This filters the all_gpkgs vector for filenames that contain the substring ‚ÄúHabitat_Polygon‚Äù and assigns the subset to survey_polygons. Excluding Geopackages Based on Certain Keywords: pattern &lt;- &quot;Polygon|DESKTOP|PC|LAPTOP|Wills&quot; all_gpkgs &lt;- all_gpkgs[!grepl(pattern, all_gpkgs)] Here, a pattern is defined to exclude geopackages with certain keywords in their names. The grepl function checks for matches, and the ! operator negates the condition to exclude matches. Exclude a Specific Problematic Geopackage: problematic_gpkg &lt;- paste0(path_to_master,&quot;/Erica/Erica Backup/Ericabutterflies.gpkg&quot;) all_gpkgs &lt;- all_gpkgs[all_gpkgs != problematic_gpkg] This code defines a specific geopackage file path that is ‚Äúproblematic‚Äù and then removes this file from the all_gpkgs vector. Reading All Geopackages into a List: myfiles &lt;- lapply(all_gpkgs, st_read) The lapply function is used here to apply the st_read function to each file path in the all_gpkgs vector. The result is a list, with each element being the content of a geopackage file stored as an spatial features dataframe. The st_read function is part of the sf package in R and is used to read spatial data. In summary, this code: - Sets a path to a master directory. - Lists all geopackage files from this directory and its subdirectories. - Filters and excludes certain geopackages based on keywords or specific filenames. - Reads the content of each remaining geopackage file into a list. 3.3 Data cleaning and preparation Most of this is self explanatory or is a bit tedious to explain. I would recommended investigating and exploring the data before the cleaning and preparation so that some of the lines make more sense. But here are a few notable things: Each student have a backup folder embedded in their folder, these geopackages are removed in line 72 There is separate geopackage for tree data collected, this is included in the dashboard so is cleaned separately and then joined to the rest. The Species column contains the name of the species recorded, whether this is the scientific name, the common name or anything else. So all the naming columns are coalesced into one column called Species. Line 135 was necessary because for some reason empty entries in the relevant columns were ‚Äú‚Äù and not NA Some of the code could be a little less sausage making-ish and could be simplified (somethings were added after the fact etc), feel free to make it more efficient! SUMMARY: Coordinate Transformation: Transforms the coordinate reference system of spatial data to standard latitude and longitude (EPSG:4326). # Transform coordinate reference system from WGS 84 / Pseudo-Mercator to standard lat long (EPSG:4326) taxa_dat &lt;- lapply(myfiles, function(x) st_transform(x, 4326)) Data Conversions: Converts the spatial data frames to regular data frames. Names each data frame in the list based on the geopackage filename. Removes duplicate data frames based on their names. # Convert spatial data frames to regular data frames taxa_dat &lt;- lapply(taxa_dat, as.data.frame) # Name each data frame in the list based on the geopackage filename names(taxa_dat) &lt;- basename(all_gpkgs) # Remove any duplicate data frames by name taxa_dat &lt;- taxa_dat[!duplicated(names(taxa_dat))] Tree Entries Package Preparation: Modifies columns for a specific geopackage (‚ÄòTree Species Entries.gpkg‚Äô) to ensure compatibility with subsequent operations. Cleans and modifies species names. Sets certain columns to specific values or NA. Filters and selects specific columns. # Modify certain columns for &#39;Tree Species Entries.gpkg&#39; so that bind_rows works taxa_dat$`Tree Species Entries.gpkg` &lt;- taxa_dat$`Tree Species Entries.gpkg` %&gt;% rename(Species = 1, Date = 2) %&gt;% mutate( Species = case_when( Species %in% c(&quot;unknown/other&quot;, &quot;Unknown/other&quot;) ~ comments.unlisted.species, Species == &quot;Unknown young pine &quot; ~ &quot;Unknown young pine&quot;, Species == &quot;Willow x10&quot; ~ &quot;Willow&quot;, TRUE ~ Species ), taxa = &quot;Vascular Plants&quot;, Observer = NA, photoid = NA, Count = NA, Other = NA, Speciesful = NA ) %&gt;% filter(Species != &quot;&quot;) %&gt;% select(Species, Date, taxa, Count) Date Processing: Converts, splits, and extracts components (year, month, day) of the ‚ÄòDate‚Äô column. # Date Processing: Convert, split and extract components of the &#39;Date&#39; column taxa_dat &lt;- lapply(taxa_dat, function(df) { df$Date &lt;- as.character(df$Date) df &lt;- df %&gt;% separate(Date, into = c(&quot;date&quot;, &quot;time&quot;), sep = &quot; (?=[^ ]+$)&quot;) %&gt;% mutate( date = ymd(gsub(&quot;/&quot;, &quot;-&quot;, date)), year = year(date), month = month(date), day = day(date) ) return(df) }) Tree Data Extraction: Removes the tree data frame from the list and stores it separately. # Extract and remove the tree dataframe from the list tree_data &lt;- taxa_dat$`Tree Species Entries.gpkg` taxa_dat$`Tree Species Entries.gpkg` &lt;- NULL Combining Data: Merges all data frames in the list into a single data frame. # Combine all data frames in the list into a single data frame taxa_comb &lt;- bind_rows(taxa_dat) Data Cleaning and Transformation: Performs several operations to clean and transform the combined data, including: Date conversions and modifications. Handling missing values. Excluding certain records. Recoding values in various columns. Selecting and renaming columns. # Clean and transform taxa data for further analysis taxa_clean &lt;- taxa_comb %&gt;% drop_na(taxa) %&gt;% as.character(df$Date) %&gt;% separate(Date, into = c(&quot;date&quot;, &quot;time&quot;), sep = &quot; (?=[^ ]+$)&quot;) %&gt;% mutate( date = ymd(gsub(&quot;/&quot;, &quot;-&quot;, date)), year = year(date), month = month(date), day = day(date) ) %&gt;% filter(!(taxa == &quot;hoverfly&quot; &amp; Observer == &quot;Erica&quot;)) %&gt;% # remove Erica hoverfly entries unite(collapsed_species, specieslatin:seaweedlatin, sep = &quot;,&quot;, na.rm = TRUE) %&gt;% mutate_at(vars(Species, collapsed_species), na_if, &quot;&quot;) %&gt;% mutate( Species = coalesce(Species, SpeciesSci, Speciesfull, collapsed_species, species, Other), photoid = if_else(is.na(photoid), NA, paste0(photoid, &quot;.jpg&quot;)), Count = ifelse(is.na(Count), 1, Count), taxa = recode(taxa, tree = &quot;Vascular Plants&quot;), year = recode(year, `2023` = &quot;2022/2023&quot;, `2022` = &quot;2022/2023&quot;) ) %&gt;% filter(!str_detect(Species, &quot;(?i)unknown&quot;), taxa != &quot;bee&quot;) %&gt;% filter_at(vars(taxa, Observer), all_vars(!is.na(.))) %&gt;% mutate( taxa = recode(taxa, plant = &quot;Vascular Plants&quot;, bird = &quot;Birds&quot;, macromoth = &quot;Macromoths&quot;, micromoth = &quot;Micromoths&quot;, butterfly = &quot;Butterflies&quot;, dragonfly = &quot;Dragonflies&quot;, hoverfly = &quot;Hoverflies&quot;, bat = &quot;Bats&quot;, amphibian = &quot;Amphibians&quot;, reptileamphibian = &quot;Amphibians&quot;, bumblebee = &quot;Bumblebee&quot;, mammal = &quot;Mammals&quot;, ladybird = &quot;Ladybirds&quot;, tree = &quot;Vascular Plants&quot;), year = recode(year, &quot;2023&quot; = &quot;2022/2023&quot;, &quot;2022&quot; = &quot;2022/2023&quot;), Observer = recode(Observer, Other1 = &quot;Cori&quot;)) %&gt;% select(Species, SpeciesSci, Count, date, Observer, taxa, photoid, geometry, year, day) %&gt;% rename( Date = date, Taxa = taxa, PhotoID = photoid ) Merging Tree Data with Cleaned Data: Prepares the tree data to be merged with the cleaned data. Merges both datasets. # tree data prep for bind tree_data &lt;- tree_data %&gt;% mutate( year = ifelse(year == &quot;2023&quot; | year == &quot;2022&quot;, &quot;2022/2023&quot;, year), Count = 1 # add column count ) %&gt;% rename( Date = date, Taxa = taxa ) # Merge tree data with the cleaned data all_years &lt;- bind_rows(taxa_clean, tree_data) Geometry Processing: Splits the geometry column into separate latitude and longitude columns. # split into lat and long for mapping all_years &lt;- all_years %&gt;% mutate(long = unlist(map(geometry,1)), lat = unlist(map(geometry,2))) Saving the Resulting Data: Saves the final data frame both as an RData object and as a CSV file. # Save the resulting dataframe save(all_years, file = &quot;all_years.RData&quot;) write.csv(all_years, file = &quot;all_years.csv&quot;) 3.4 Pulling photos and documents from OneDrive 3.4.1 Photos Reading Team Photos from a Directory: # read in all photo files within Survey_Photos in OneDrive Folder all_Tphotos &lt;- list.files( path = paste0(path_to_master,&quot;/Team_data&quot;), recursive = TRUE, pattern = &quot;\\\\.jpg$&quot;, full.names = FALSE ) This is the same as the first few lines of code, except that the path is constructed by appending ‚Äú/Team_data‚Äù to the path_to_master. The result is stored in all_Tphotos, which will be a vector of filenames (with ‚Äú.jpg‚Äù extension) from the specified directory and its subdirectories. Constructing a Destination Path for Team Photos: www_Tfolder_path &lt;- file.path(getwd(), &quot;www/Team_Data&quot;) This line constructs a path by combining the current working directory (obtained using getwd()) with ‚Äúwww/Team_Data‚Äù. Copying the Team Photos: photo_move &lt;- file.copy( from = file.path(paste0(path_to_master,&quot;/Team_data&quot;), all_Tphotos), to = file.path(paste(www_Tfolder_path), all_Tphotos) ) Here, file.copy is used to copy files. The from argument constructs the full paths of the source files, and the to argument constructs the full paths of the destination. The photos are copied from the source directory to the destination. The same process as above is then done for the Survey Photos. In summary, the code is designed to: Read all ‚Äú.jpg‚Äù files from ‚ÄúTeam_data‚Äù and ‚ÄúSurvey_Photos‚Äù directories (including subdirectories). Copy those files to two new destinations under the ‚Äúwww‚Äù folder in the current working directory. 3.4.2 Documents The code for downloading and saving the students‚Äô about me descriptions is very similar to the process above. The only addition is that the text of the ‚Äústudent_aboutme‚Äù word document is then extracted and saved into an object called ‚Äústudent_text‚Äù. Then the text is split into paragraphs. 3.5 Things to think about How will the next years data be included? In the same folder? New QGIS folder? "],["ui.html", "4 UI 4.1 ui.R 4.2 Tabs", " 4 UI 4.1 ui.R Here we define the user interface (UI) for the dashboard. First we source the ui code for each of the tabs: # source tabItems source(&quot;TabItems/Tab_KPI.R&quot;) source(&quot;TabItems/Tab_Taxa_Explorer.R&quot;) source(&quot;TabItems/Tab_Student_Engagement.R&quot;) source(&quot;TabItems/Tab_About.R&quot;) source(&quot;TabItems/Tab_Record_Finder.R&quot;) Header Section (dashboardHeader): Sets up the header of the dashboard with the title ‚ÄúBiodiversity Monitoring Programme.‚Äù # 1. HEADER --------------------------------------------------------------------------------------------------- header &lt;- dashboardHeader( title = &quot;Biodiversity Monitoring Programme&quot;, titleWidth = 320 ) Sidebar Section (dashboardSidebar): Creates a sidebar that contains a menu (sidebarMenu) with several items. It includes a dropdown (selectInput) for choosing the survey year. Menu items include ‚ÄúAbout,‚Äù ‚ÄúKey Performance Indices,‚Äù ‚ÄúTaxa Explorer,‚Äù ‚ÄúStudent Engagement,‚Äù and ‚ÄúRecord Finder.‚Äù Conditional panels (conditionalPanel) show/hide additional input fields based on the selected menu item. For example, when ‚ÄúTaxa Explorer‚Äù is selected, a dropdown to select a taxa is displayed; when ‚ÄúStudent Engagement‚Äù is selected, a dropdown to select a student is displayed. # 2. SIDEBAR --------------------------------------------------------------------------------------------------- sidebar &lt;- dashboardSidebar( sidebarMenu( id = &quot;sidebar&quot;, # select survey year selectInput(inputId = &quot;year&quot;, label = &quot;Select year&quot;, choices = years), # About Page menuItem(&quot;About&quot;, tabName = &quot;about&quot;, icon = icon(&quot;circle-info&quot;)), # first menu item: Key Performance Indices menuItem(&quot;Key Performance Indices&quot;, tabName = &quot;kpi&quot;, icon = icon(&quot;gauge&quot;)), # second menu item: Taxa Explorer menuItem(&quot;Taxa Explorer&quot;, tabName = &quot;taxa_expl&quot;, icon = icon(&quot;crow&quot;)), # Show panel only when taxa explorer sidebar is selected useShinyjs(), # select taxa div( id = &quot;taxa_cond&quot;, conditionalPanel( &quot;input.sidebar == &#39;taxa_expl&#39;&quot;, selectInput(inputId = &quot;taxa_select&quot;, label = &quot;Select taxa&quot;, choices = NULL) ) ), # third menu item: Student Engagement menuItem(&quot;Student Engagement&quot;, tabName = &quot;stud_expl&quot;, icon = icon(&quot;graduation-cap&quot;)), # select Observer div( id = &quot;student_cond&quot;, conditionalPanel( &quot;input.sidebar == &#39;stud_expl&#39;&quot;, selectInput(inputId = &quot;student_select&quot;, label = &quot;Select Student&quot;, choices = NULL) ) ), # fourth menu item: Record &amp; Photos menuItem(&quot;Record Finder&quot;, tabName = &quot;record_finder&quot;, icon = icon(&quot;camera-retro&quot;)) ) ) Body Section (dashboardBody): Defines the main body of the dashboard. Utilizes the dashboardBody function and includes additional styling using tags$head to link an external stylesheet (custom.css). Uses the tabItems function to organize the content into different tabs (e.g., Tab0, Tab1, etc.). # 3. BODY --------------------------------------------------------------------------------------------------- body &lt;- dashboardBody( useShinyjs(), tags$head( tags$link(rel = &quot;stylesheet&quot;, type = &quot;text/css&quot;, href = &quot;custom.css&quot;) ), tabItems( Tab0, Tab1, Tab2, Tab3, Tab4 ) ) UI Function (dashboardPage): Combines the header, sidebar, and body into a complete UI using the dashboardPage function. This UI function essentially wraps up all the UI components, creating the structure of the Shiny app. # 4. UI Function --------------------------------------------------------------------------------------------------- ui &lt;- dashboardPage(header, sidebar, body) 4.2 Tabs 4.2.1 Tab_About This script defines the UI for the About tab. At the bottom of teh script is where the UI is put together: # Tab Code -------------------------------------------------------------------------------------------------------------- Tab0 &lt;- tabItem( tabName = &quot;about&quot;, tabBox( width = &quot;100%&quot;, id = &quot;tabset1&quot;, overview_panel, kpi_panel, taxa_explorer_panel, student_engagement_panel, record_finder_panel ) ) The tab itself consists of a tabBox (a box with tabs) and the content for each of the panels within the box are defined in the sections above this piece of code. For example, the tab named ‚ÄúOverview‚Äù is defined as: # Overview Panel Content ------------------------------------------------------------------------------ overview_panel &lt;- tabPanel( title = &quot;Overview&quot;, tags$div( class = &quot;landing-wrapper&quot;, # child element 1: images tags$div( class = &quot;landing-block background-content&quot;, # top left img(src = &quot;group_photo2.jpeg&quot;), # top right img(src = &quot;TomButterfly020823HolBl.jpg&quot;), # bottom left img(src = &quot;TomMoth120823JulyHfly.jpg&quot;), # bottom right img(src = &quot;group_photo.jpeg&quot;) ), # child element 2: content tags$div( class = &quot;landing-block foreground-content&quot;, tags$div( class = &quot;foreground-text&quot;, # tags$h2(&quot;Biodiversity Monitoring Programme Data Dashboard&quot;), tags$p(&quot;Welcome to the University of St Andrews Biodiversity Monitoring Program Data Dashboard! We are thrilled to have you here as we embark on a journey through the rich tapestry of nature. This data dashboard is the culmination of the hard work and dedication of our university students, who spent their summer immersed in the natural world, collecting invaluable biodiversity data.&quot;), tags$p(&quot;Explore the wonders of the diverse ecosystems that surround us and gain insights into the intricate web of life that thrives within our region. Our mission is not only to deepen our understanding of the natural world but also to contribute to the conservation efforts that safeguard these vital ecosystems.&quot;), tags$p(&quot;On this dashboard, you will find a wealth of information, from species counts and distribution maps to trends and observations. Whether you are a fellow researcher, a student, or simply a nature enthusiast, we invite you to delve into the data and be inspired by the beauty and complexity of our local environment.&quot;), tags$p(&quot;Together, we can make a difference in preserving and protecting the biodiversity of the University of St Andrews and beyond. Thank you for joining us on this journey, and may this dashboard serve as a valuable resource for your exploration and learning.&quot;) ) ) ) ) The content of this tab is organized into two main elements within a div container: Images Section: Four images are displayed in a 2x2 grid (top left, top right, bottom left, bottom right). These images are loaded from files named ‚Äúgroup_photo2.jpeg,‚Äù ‚ÄúTomButterfly020823HolBl.jpg,‚Äù ‚ÄúTomMoth120823JulyHfly.jpg,‚Äù and ‚Äúgroup_photo.jpeg.‚Äù Content Section: Text content is provided in a ‚Äúforeground-content‚Äù div. The div elements are given class ids with the argument ‚Äúclass‚Äù because we refer to them in the custom.css file - where we style the elements. I used the code from this link to build the content: https://community.rstudio.com/t/background-images-in-shiny/12261. 4.2.2 Tab_KPI Here we define the content for the tab: ‚ÄúKey Performance Indices‚Äù. Summary: - This tab is designed to display key performance indices related to biodiversity. It includes sections for the Annual Biodiversity Index, Benchmark Biodiversity Index, Change Biodiversity Index (conditionally displayed), and a chart showing the number of species per taxa. The layout is organized using fluidRow to arrange content horizontally and box to create collapsible boxes. Conditional rendering using conditionalPanel allows for dynamic display based on user input. Let‚Äôs break down the code to understand its structure and purpose: # TAB: KPI Tab1 &lt;- tabItem( tabName = &quot;kpi&quot;, h3(&quot;Annual Biodiversity Index&quot;), fluidRow( valueBoxOutput(&quot;S_H&quot;), valueBoxOutput(&quot;area&quot;), valueBoxOutput(&quot;engagement&quot;) ), h3(&quot;Benchmark Biodiversity Index&quot;), fluidRow( valueBoxOutput(&quot;MS&quot;), valueBoxOutput(&quot;local&quot;), valueBoxOutput(&quot;fife&quot;) ), div( conditionalPanel( &quot;input.year !== &#39;2022/2023&#39;&quot;, h3(&quot;Change Biodiversity Index&quot;), box( collapsible = TRUE, width = 12, plotlyOutput(&quot;example_plot&quot;), style = &quot;display:block; overflow-x: scroll;&quot; ) ) ), # taxa chart fluidRow( box( collapsible = TRUE, width = 12, title = &quot;Number of species per taxa&quot;, plotlyOutput(&quot;taxa_bar&quot;, height = &quot;300px&quot;), style = &quot;display:block; overflow-x: scroll;&quot; ) ) ) Tab Structure: tabItem: This defines a tab within the Shiny application. tabName = \"kpi\": The tab is named ‚Äúkpi‚Äù which corresponds to the tabName id we gave it in the ui.R script: # from ui.R: # first menu item: Key Performance Indices menuItem(&quot;Key Performance Indices&quot;, tabName = &quot;kpi&quot;, icon = icon(&quot;gauge&quot;)) Content Sections: Annual Biodiversity Index Section: h3(\"Annual Biodiversity Index\"): This adds a subheading indicating the section‚Äôs title. fluidRow: This creates a row to hold the content. valueBoxOutput: These are placeholders for numeric values to be displayed. Three values (‚ÄúS_H,‚Äù ‚Äúarea,‚Äù ‚Äúengagement‚Äù) are expected to be displayed in a row. Benchmark Biodiversity Index Section: h3(\"Benchmark Biodiversity Index\"): Another subheading for this section. fluidRow: Another row to hold the content. valueBoxOutput: Similar to the Annual Biodiversity Index section, three values (‚ÄúMS,‚Äù ‚Äúlocal,‚Äù ‚Äúfife‚Äù) are expected to be displayed in a row. Change Biodiversity Index Section (Conditional): div: A div container. conditionalPanel: This panel is conditionally displayed based on the input ‚Äúyear‚Äù not being equal to ‚Äú2022/2023.‚Äù h3(\"Change Biodiversity Index\"): A subheading for this section. box: A collapsible box containing a Plotly plot (example_plot). This section seems to be about the change in biodiversity over time. Taxa Chart Section: fluidRow: Another row. box: A collapsible box with a title (‚ÄúNumber of species per taxa‚Äù) and a Plotly plot (taxa_bar). This section likely displays a chart showing the number of species per taxa. 4.2.3 Tab_Taxa_Explorer Summary - The ‚ÄúTAXA EXPLORER‚Äù tab is designed to explore biodiversity data related to taxa. It includes sections for summary charts, a Leaflet map, detailed lists of species, and records. The layout is organized using tabBox for grouping content into tabs and box for creating collapsible boxes. Various outputs such as plots and DataTables are defined for displaying data. # TAB: TAXA EXPLORER Tab2 &lt;- tabItem( tabName = &quot;taxa_expl&quot;, br(), tabBox( id = &quot;box1&quot;, height = 500, width = 12, tabPanel(&quot;Summary&quot;, fluidRow( column(6, h5(&quot;Top 10 Species Composition&quot;), plotOutput(&quot;species_pie&quot;) ), column(6, offset = 1.5, br(), br(), br(), fluidRow( valueBoxOutput(&quot;num_species_taxa&quot;, width = 10), style =&quot;margin: auto;&quot; ), fluidRow( valueBoxOutput(&quot;num_records_taxa&quot;, width = 11), style =&quot;margin: auto;&quot; ), fluidRow( valueBoxOutput(&quot;top_obs&quot;, width = 12), style =&quot;margin: auto;&quot; ) ) ) ), tabPanel(&quot;Top 50 species&quot;, plotlyOutput(&quot;species_bar&quot;, inline = FALSE, width = &quot;100%&quot;)), ), box( id = &quot;box1&quot;, height = &quot;100%&quot;, width = 12, leafletOutput(&quot;MapPlot1&quot;) ), tabBox( id = &quot;box2&quot;, height = 500, width = 12, tabPanel(&quot;Species List&quot;, DTOutput(&quot;species_list&quot;)), tabPanel(&quot;Records&quot;, DTOutput(&quot;taxa_table&quot;)) ), uiOutput(&quot;Modal_taxa&quot;) ) 1. Tab Structure: - tabItem: This defines a tab within the Shiny application. - tabName = \"taxa_expl\": The tab is named ‚Äútaxa_expl.‚Äù 2. Content Sections: Summary Section: tabBox: This creates a box containing tabs. id = \"box1\": Identifier for the box. height = 500, width = 12: Dimensions of the box. tabPanel(\"Summary\", ...): The first tab is named ‚ÄúSummary.‚Äù fluidRow: A row to hold content. Two columns: First column (6 units): h5: A subheading for the first column. plotOutput(\"species_pie\"): Output for a plot displaying the top 10 species composition. Second column (6 units, offset by 1.5 units): Value boxes displaying the number of species, records, and top observer. Top 50 Species Section: Another tab within the same tabBox. tabPanel(\"Top 50 species\", ...): The second tab is named ‚ÄúTop 50 species.‚Äù plotlyOutput(\"species_bar\", inline = FALSE, width = \"100%\"): Output for a Plotly plot displaying the top 50 species. Leaflet Map Section: box: A collapsible box. leafletOutput(\"MapPlot1\"): Output for a Leaflet map. Species List and Records Section: Another tabBox. id = \"box2\": Identifier for the second box. height = 500, width = 12: Dimensions of the box. Two tabs within this box: tabPanel(\"Species List\", DTOutput(\"species_list\")): Displaying a DataTable of species. tabPanel(\"Records\", DTOutput(\"taxa_table\")): Displaying a DataTable of records. Dynamic UI Section: uiOutput(\"Modal_taxa\"): Placeholder for dynamic UI content. 4.2.4 Tab_Student_Engagement Summary The ‚ÄúSTUDENT ENGAGEMENT‚Äù tab is designed to explore and present data related to individual student engagement. It includes sections for a header with a possible image, student description, value boxes displaying key metrics, a plot, and tabs with DataTables for species list and records. The layout is organized using fluidRow, box, and tabBox for grouping content. # TAB: STUDENT ENGAGEMENT Tab3 &lt;- tabItem( tabName = &quot;stud_expl&quot;, tags$h3( style = &quot;display: flex; align-items: center;&quot;, uiOutput(&quot;photoOutput&quot;), textOutput(&quot;student_heading&quot;) ), fluidRow(column(textOutput(&quot;student_description&quot;), width = 12)), br(), fluidRow( valueBoxOutput(&quot;num_records&quot;), valueBoxOutput(&quot;num_days&quot;), valueBoxOutput(&quot;top_taxa&quot;) ), fluidRow( box( collapsible = TRUE, width = 12, plotlyOutput(&quot;stud_plot&quot;, height = &quot;300px&quot;), style = &#39;display:block; overflow-x: scroll;&#39; ) ), fluidRow( tabBox( id = &quot;box2&quot;, height = 500, width = 12, tabPanel(&quot;Species List&quot;, DTOutput(&quot;species_list_student&quot;)), tabPanel(&quot;Records&quot;, DTOutput(&quot;student_table&quot;)) ) ), uiOutput(&quot;Modal_student&quot;) ) 1. Tab Structure: - tabItem: This defines a tab within the Shiny application. - tabName = \"stud_expl\": The tab is named ‚Äústud_expl.‚Äù 2. Content Sections: - Header Section: - tags$h3: Heading section. - Styled with flex display and align-items to center. - uiOutput(\"photoOutput\"): Placeholder for dynamic UI content (possibly an image). - textOutput(\"student_heading\"): Placeholder for dynamic UI content (possibly student heading). Student Description Section: fluidRow: A row to hold content. column(textOutput(\"student_description\"), width = 12): A column displaying dynamic UI content (possibly student description). Value Box Section: fluidRow: A row. valueBoxOutput: Three value boxes displaying the number of records, number of days, and top taxa. Plot Section: fluidRow: Another row. box: A collapsible box. plotlyOutput(\"stud_plot\", height = \"300px\"): Output for a Plotly plot (possibly related to student engagement), with a scrollable style. Species List and Records Section: fluidRow: Another row. tabBox: A box containing tabs. id = \"box2\": Identifier for the box. height = 500, width = 12: Dimensions of the box. Two tabs within this box: tabPanel(\"Species List\", DTOutput(\"species_list_student\")): Displaying a DataTable of species related to the student. tabPanel(\"Records\", DTOutput(\"student_table\")): Displaying a DataTable of records related to the student. Dynamic UI Section: uiOutput(\"Modal_student\"): Placeholder for dynamic UI content. 4.2.5 Tab_Record_Finder Summary The ‚ÄúRecord Finder‚Äù tab is designed to display a set of random images in an image gallery. Users can enter a PhotoID with an extension, click a button to view the image, and the selected image will be displayed dynamically. The layout is organized using tags$div to create containers, textInput and actionButton for user input and interaction, and uiOutput for dynamic content. # TAB 4: Record Finder all_Sphotos &lt;- list.files( path = paste0(&quot;www/&quot;), recursive = TRUE, pattern = &quot;\\\\.jpg$&quot;, full.names = FALSE ) random_photos &lt;- sample(all_Sphotos, size = 10) Tab4 &lt;- tabItem( tabName = &quot;record_finder&quot;, tags$div( class = &quot;landing-wrapper-record&quot;, # child element 1: images tags$ul( class = &quot;image-gallery&quot;, tags$li(img(src = paste(random_photos[1]))), tags$li(img(src = paste(random_photos[2]))), tags$li(img(src = paste(random_photos[3]))), tags$li(img(src = paste(random_photos[4]))), tags$li(img(src = paste(random_photos[5]))), tags$li(img(src = paste(random_photos[6]))), tags$li(img(src = paste(random_photos[7]))), tags$li(img(src = paste(random_photos[8]))), tags$li(img(src = paste(random_photos[9]))), tags$li(img(src = paste(random_photos[10]))) ), # child element 2: content tags$div( class = &quot;landing-block foreground-content&quot;, tags$div( class = &quot;foreground-text&quot;, align = &quot;center&quot;, textInput(&quot;PhotoID&quot;, &quot;Enter PhotoID (with extension):&quot;), actionButton(&quot;viewButton&quot;, &quot;View Image&quot;, style = &quot;display: block; background-color: #619e62; color: #ffffff; border: none; border-radius: 5px; cursor: pointer; font-size: 16px; margin: auto&quot;), br(), br(), uiOutput(&quot;imageOutput&quot;) ) ) ) ) 1. Tab Structure: - tabItem: This defines a tab within the Shiny application. - tabName = \"record_finder\": The tab is named ‚Äúrecord_finder.‚Äù 2. Content Sections: - Random Photos Section: - list.files: Reads all photo files within the ‚Äúwww/‚Äù directory with a ‚Äú.jpg‚Äù extension. - sample: Selects a random sample of 10 photos from the list. Image Gallery Section: tags$div: A container div with class ‚Äúlanding-wrapper-record.‚Äù tags$ul: An unordered list with class ‚Äúimage-gallery.‚Äù tags$li: List items containing images. Each image is sourced from a randomly selected photo. Content Section: tags$div: Another container div with class ‚Äúlanding-block foreground-content.‚Äù tags$div: A div for text content. textInput: An input field for entering a PhotoID with extension. actionButton: A button for triggering an action, in this case, to view the image. uiOutput(\"imageOutput\"): Placeholder for dynamic UI content (possibly an image). "],["server.html", "5 Server 5.1 Setup 5.2 Valuebox Module 5.3 Tab About 5.4 Tab KPI 5.5 Tab Taxa Explorer 5.6 Tab Student Engagement 5.7 Tab Record Finder", " 5 Server In the server.R file we define the server side of the shiny app. The code is neatly commented so that you can navigate to the server code for each of the tab panels: Before that though, we do some NB things: 5.1 Setup 1. Fetching Data: Reactive expression (survey_data) fetches data based on the user-selected year (input$year) from a list of data frames (all_years_list). Here we subset the data for the year the user selects and store in a reactive dataframe. If you‚Äôre unfamiliar with reactive expressions, refer to the Master Shiny textbook! You can also look at the useful things section of this book, where I‚Äôve provided some explanations of random shiny things. The data frame corresponding to the selected year is stored in extract_df, and the reactive expression returns this subset of data. Now ‚Äúsurvey_data‚Äù is a reactive dataset and is called throughout the shiny app likes its a function, i.e.¬†‚Äúsurvey_data()‚Äù. survey_data &lt;- reactive({ extract_df &lt;- all_years_list[[input$year]] return(extract_df) }) 2. Taxa Names for Taxa Explorer: taxa_names &lt;- reactive({ sort(unique(survey_data()$Taxa)) }) This reactive expression (taxa_names) generates a sorted list of unique taxa names based on the currently selected survey data. We call the reactive dataset and then extrac and sort the unique entries in the Taxa column. The resulting reactive object taxa_names is then used to populate the dropdown menu in for the Taxa Explorer tab. 3. Student Names for Student Engagement: student_names &lt;- reactive({ survey_data() %&gt;% distinct(Observer, .keep_all = TRUE) %&gt;% drop_na(Observer) %&gt;% pull(Observer) }) Here we do the same thing as in the previous block but for the student names. A few extra things are done: any duplicate observer names and NA values. The result is a list of student names for populating the dropdown menu in the Student Engagement tab. 4. Updating Taxa and Student Selection: In the follwoing blocks of code, we take the reactive objects taxa_names and student_names and we update the dropdown menus: observeEvent(input$year, { if (input$year == &quot;2022/2023&quot;) { updateSelectInput(session, &quot;taxa_select&quot;, choices = taxa_names(), selected = &quot;Butterflies&quot;) } else { updateSelectInput(session, &quot;taxa_select&quot;, choices = taxa_names()) } }, ignoreNULL = FALSE ) If the selected year is ‚Äú2022/2023,‚Äù it updates the choices in the taxa dropdown menu (taxa_select) with taxa_names() and sets the default selected value to ‚ÄúButterflies.‚Äù Otherwise, it updates the choices without a default selection. observeEvent(input$year, { updateSelectInput(session, &quot;student_select&quot;, choices = student_names()) }, ignoreNULL = FALSE ) 5.2 Valuebox Module Let‚Äôs go through how the shiny module for the custom valuebox is created. Open the ‚Äúvaluebox_module.R‚Äù script in the Modules folder. I modified the code from this link and used this website as well. I mainly did this because I wnated more control over the appearance of the valueboxes. The standard valuebox from shinydashboard can only have select colors etc. customValueBox Function: Purpose: This function creates the HTML structure for a custom value box. Parameters: value: The main value displayed in the value box. subtitle: Additional text displayed below the main value. icon: An optional icon to be displayed in the value box. color: Text color of the value box. background: Background color of the value box. width: Width of the value box (default is 4 columns in a 12-column grid). height: Height of the value box (default is ‚Äú150px‚Äù). Functionality: The function constructs HTML elements using the provided parameters to create a custom value box. It uses the shinydashboard package‚Äôs internal tagAssert function to assert that the icon is of type ‚Äúi.‚Äù The style is constructed based on the provided colors, width, and height. The div function is used to create the structure of the value box, including the main value, subtitle, and optional icon. # custom value box function customValueBox &lt;- function(value = NULL, subtitle = NULL, icon = NULL, color, background, width = 4, height = &quot;150px&quot;){ if (!is.null(icon)) shinydashboard:::tagAssert(icon, type = &quot;i&quot;) style &lt;- paste0(&quot;color: &quot;, color, &quot;; background-color: &quot;, background, &quot;;&quot;, &quot;width: &quot;,width, &quot;;&quot;, &quot;height: &quot;, height) boxContent &lt;- div( class = &quot;small-box&quot;, style = style, div( class = &quot;inner&quot;, h4(value), p(subtitle) ), if (!is.null(icon)) div(class = &quot;icon-large&quot;, icon) ) div( class = if (!is.null(width)) paste0(&quot;col-sm-&quot;, width), boxContent ) } valuebox_server Function: Purpose: This function serves as the server logic for the value box module. Parameters: id: A unique identifier for the value box. Other parameters are passed to the customValueBox function. Functionality: It uses the moduleServer function to define a Shiny module. The renderValueBox function is used to render the value box based on the inputs. The customValueBox function is called with the provided parameters. # valuebox module server function --------------------------------------------- valuebox_server &lt;- function(id, value, subtitle, icon, color, background, width = 4, height = &quot;150px&quot;){ moduleServer(id, function(input, output, session){ output$vb &lt;- renderValueBox({ customValueBox( value = value, subtitle = subtitle, icon = icon, background = background, color = color, width = width, height = height ) }) }) } Usage Example: To use this module in a Shiny application, you would call the valuebox_server function in the server part of your Shiny app and use valueBoxOutput in the UI part. Example: output$myValueBox &lt;- valuebox_server( id = &quot;myValueBox&quot;, value = 42, subtitle = &quot;Answer to the Ultimate Question of Life, the Universe, and Everything&quot;, icon = icon(&quot;star&quot;), color = &quot;blue&quot;, background = &quot;lightblue&quot;, width = 4, height = &quot;150px&quot; ) 5.3 Tab About Here the server side of the valueboxes that are in the Tab_About UI are made and we use the paragraphs from the Tab_About.R; # from Tab_About.R # Descriptions for server side valueboxes # ABI score descriptions par_s_h &lt;- &quot;Description of species and habitat score.&quot; par_area &lt;- &quot;Description of area managed for biodiversity score&quot; par_engage &lt;- &quot;Description of biodiversity engagement score.&quot; # BBI score descriptions par_m_s &lt;- &quot;Description of mean species richness per hectare.&quot; par_l_s &lt;- &quot;Description of local species richness per hectare.&quot; par_fife &lt;- &quot;Description of Fife species richness per hectare.&quot; ABI Descriptions output$S_H_about &lt;- valuebox_server( id = &quot;S_H_about&quot;, subtitle = paste(par_s_h), value = &quot;Species and Habitat Score&quot;, background = &quot;lightgray&quot;, color = &quot;black&quot;, icon = NULL ) output$S_H_about is a Shiny output element using the valuebox_server function. It displays a box containing a title, subtitle, and value. id: A unique identifier for the box. subtitle: The text displayed below the title, extracted from a reactive variable (par_s_h). value: The main content of the box, indicating ‚ÄúSpecies and Habitat Score.‚Äù Other parameters set the background color, text color, and icon (none in this case). More ABI Descriptions: output$area_about &lt;- valuebox_server( id = &quot;area_about&quot;, subtitle = paste(par_l_s), value = &quot;Area Score&quot;, background = &quot;lightgray&quot;, color = &quot;black&quot;, icon = NULL ) output$engagement_about &lt;- valuebox_server( id = &quot;engagement_about&quot;, subtitle = paste(par_engage), value = &quot;Engagement Score&quot;, background = &quot;lightgray&quot;, color = &quot;black&quot;, icon = NULL ) Similar to the previous example, these valuebox_server outputs display descriptions for different components of the Annual Biodiversity Index (ABI). BBI Descriptions: output$MS_about &lt;- valuebox_server( id = &quot;MS_about&quot;, subtitle = paste(par_m_s), value = &quot;Local species score per hectare&quot;, background = &quot;lightgray&quot;, color = &quot;black&quot;, icon = NULL ) output$fife_about &lt;- valuebox_server( id = &quot;fife_about&quot;, subtitle = paste(par_fife), value = &quot;Local species score per hectare&quot;, background = &quot;lightgray&quot;, color = &quot;black&quot;, icon = NULL ) output$local_about &lt;- valuebox_server( id = &quot;local_about&quot;, icon = NULL, subtitle = paste(par_l_s), value = &quot;Local species score per hectare&quot;, background = &quot;lightgray&quot;, color = &quot;black&quot; ) These valuebox_server outputs display descriptions for different components of the Benchmark Biodiversity Index (BBI). Summary: This server code defines logic to render images and display descriptions for the ‚ÄúAbout‚Äù tab of a Shiny application. The images include group photos, and the descriptions provide information about various biodiversity indices and scores. The data for these descriptions seems to come from reactive variables like par_s_h, par_l_s, par_engage, par_m_s, and par_fife. 5.4 Tab KPI This R Shiny server code is associated with the ‚ÄúKey Performance Indices‚Äù tab (TAB 1). More valueboxes are created! And the server logic for the two graphs are created. The first one is always displayed, the second is only displayed when the year selected is not the first year. ABI Plot (Bar Plot): output$taxa_bar &lt;- renderPlotly({ # Data manipulation to get species count per Taxa df &lt;- survey_data() %&gt;% group_by(Taxa) %&gt;% summarise(Count = n_distinct(Species)) # Plotting using ggplot2 and converting it to Plotly ggplotly( ggplot(df, aes(x = reorder(Taxa, -Count), y = Count)) + geom_bar(stat = &quot;identity&quot;, fill = &quot;#028E9D&quot;, width = 0.2) + labs( x = &quot;\\nTaxa&quot;, y = &quot;Number of Species\\n&quot; ) + theme_minimal() + theme( axis.text = element_text(size = 11), axis.text.x = element_text(size = 10, angle = 45, vjust = 1, hjust = 1) ), tooltip = &quot;y&quot; ) }) Within the renderPlotly function we group the data by taxa and count the number of unique species with tidyverse logic. This is then stored in an object called df. This occurs within the function, so it can only be used within the function. The renderPlotly function generates the plot based on the species count data and uses the ggplotly function to convert the ggplot2 plot to a Plotly interactive plot. Example Plot for Change (CBI): An example plot is provided for the Change Biodiversity Index (CBI). This plot is only shown when the selected year is not the first year (2022/2023). output$example_plot &lt;- output$species_bar &lt;- renderPlotly({ # Example data for CBI plot example_df &lt;- data.frame( Year = c(&quot;2022/2023&quot;, &quot;2023/2024&quot;), CBI = c(100, 89) ) # Creating a ggplot2 plot and converting it to Plotly ggplotly( ggplot(example_df, aes(x = Year, y = CBI)) + geom_point(stat = &quot;identity&quot;, colour = &quot;#068D9D&quot;, size = 3) + labs( x = &quot;\\nYear&quot;, y = &quot;CBI\\n&quot; ) + theme_light() + theme(axis.text.x = element_text(size = 10, angle = 45, vjust = 1, hjust = 1)), tooltip = c(&quot;y&quot;) ) }) This plot serves as an example for the Change Biodiversity Index, providing a visual representation of the CBI values across different years. 5.5 Tab Taxa Explorer Using the reactive dataframe survey_data, we make a new reactive dataframe that is filtered for the selected taxa and selects certain columns: # Create a reactive dataframe &#39;df&#39; based on the selected taxa from the input. # This dataframe filters the &#39;survey_data()&#39; by the selected taxa and selects specific columns. taxa_df &lt;- reactive({ survey_data() %&gt;% filter(Taxa == input$taxa_select) %&gt;% select(Species, Count, Observer, Date, PhotoID, geometry) }) The new reactive daaframe taxa_df is then used throughout the server code for this tab. This R Shiny server code is associated with the ‚ÄúTaxa Explorer‚Äù tab (TAB 2) in a Shiny application. The purpose of this tab is to explore details related to a specific taxonomic group (Taxa). Let‚Äôs break down the code: Pie Chart (Species Distribution): output$species_pie: Renders a pie chart showing the distribution of species for the selected taxa. The chart displays the top 10 species based on their count. Value Boxes: output$num_species_taxa: Renders a value box showing the number of distinct species for the selected taxa. The icon changes based on the selected taxa. A mapping between taxa names and icons is created. When a taxa is selected in the Shiny application, it looks up the corresponding icon for that taxa from the icon_map. If there is no specific icon for the selected taxa, it defaults to using the ‚Äúleaf‚Äù icon. output$num_records_taxa: Renders a value box showing the total number of records for the selected taxa. output$top_obs: Renders a value box highlighting the top observer based on the number of records for the selected taxa. Bar Graph of Species Records: output$species_bar: Renders a bar graph showing the number of records for the top 50 species based on the count. Data Tables: output$taxa_table: Renders a data table displaying all records for the selected taxa. output$species_list: Renders a data table listing species and their respective number of records, sorted in descending order. The datatables use the table_options defined in global.R. Leaflet Map: output$MapPlot1: Renders a Leaflet map displaying the locations of species occurrences for the selected taxa. Modal for Record Photo: Dynamically generates a modal UI for displaying the photo of a selected record when a row is selected in the data table. The modal includes an image and a close button. This could have been done with in built functions: https://shiny.posit.co/r/reference/shiny/1.7.3/modaldialog but I wanted more control over the functionality and the way images were displaying. The code runs JavaScript code using the shinyjs package. I used ChatGPT to help with code! The same logic is used for displaying a modal in the Student Engagement tab. observeEvent(input$taxa_table_rows_selected, {...}): This observer is triggered when the user selects a row in the data table with the id taxa_table. input$taxa_table_rows_selected contains the indices of the selected rows. The observer extracts the PhotoID associated with the selected row from the taxa_df() (assuming there is a reactive dataframe named taxa_df()). If a valid PhotoID is found, it enables the modal, shows it, and sets the source (src) attribute of the image (modalImage_taxa) to the selected photo. output$Modal_taxa &lt;- renderUI({...}): This is a dynamic UI element for rendering the modal. It is a Fluid Page containing a div with the id customModal and additional styling. Inside the modal, there is another div (modalContent) that contains an h4 element with the title ‚ÄúRecord Photo,‚Äù an image (modalImage_taxa), and a close button (closeModalBtn_taxa). The modalImage_taxa has a dynamic source (src) that will be set by the JavaScript code when a row is selected. observeEvent(input$closeModalBtn_taxa, {...}): This observer is triggered when the user clicks the ‚ÄúClose Modal‚Äù button. It runs JavaScript code to hide the modal ($(\"#customModal\").hide();). In summary, when a user selects a row in the data table, the associated photo is displayed in a modal. The modal is dynamically generated with the renderUI function, and it includes an image and a button to close the modal. The JavaScript code (shinyjs::runjs) is used to control the display and hiding of the modal. 5.6 Tab Student Engagement You‚Äôll find a lot of similar code here, icnluding datatables, valueboxes, plotly plot and the custom modal. The first few lines of code are new though: 1. Student Heading First, the student heading is created and dynamically changes based on which student is selected using input$student_select. # Heading for the student engagement section # This will dynamically display the name of the selected student followed by &quot;Biodiversity Data&quot; output$student_heading &lt;- renderText({ paste(input$student_select, &quot;&#39;s Biodiversity Data&quot;, sep = &quot;&quot;) }) 2. About me section Then the ‚Äúabout_me‚Äù descriptions that the student wrote is pasted. If no paragraph is found, nothing (\"\") is displayed. # Description for the student engagement section # This fetches a description paragraph related to the selected student from the &#39;student_text_sep&#39; dataset output$student_description &lt;- renderText({ # Get the selected student from the input search_word &lt;- input$student_select # Find the index of the first occurrence of the selected student&#39;s name in student_text_sep search_paragraph &lt;- grep(search_word, student_text_sep)[1] # Extract the relevant paragraph based on the found index description &lt;- student_text_sep[search_paragraph] # If the student has not given a description, return a blank string if (is.na(description)) { description &lt;- &quot;&quot; } else { description } }) output$student_description &lt;- renderText({ ... }): This sets up a reactive output element called student_description. The content of this output is generated dynamically based on the selected student‚Äôs name. search_word &lt;- input$student_select: It gets the selected student‚Äôs name from the student_select input. search_paragraph &lt;- grep(search_word, student_text_sep)[1]: This finds the index of the first occurrence of the selected student‚Äôs name in the student_text_sep dataset. The grep function is used for pattern matching, and [1] is used to get the first match. description &lt;- student_text_sep[search_paragraph]: This extracts the relevant paragraph from the student_text_sep dataset based on the found index. if (is.na(description)) { description &lt;- \"\" } else { description }: This checks if the student has given a description. If the description is missing (NA), it sets description to an empty string. Otherwise, it leaves description unchanged. The final description variable is then returned, and it will be displayed in the UI as the text content for the student engagement section. If the student has not provided a description, an empty string will be displayed. 3. Student Photo # Display photo of the selected student # This dynamically fetches the photo based on the selected student&#39;s name output$photoOutput &lt;- renderUI({ name &lt;- input$student_select # Check if a photo file exists for the selected student if (file.exists(paste0(&quot;www/Team_Data/&quot;, name, &quot;.jpg&quot;))) { # If a photo exists, create an HTML div with an img tag photo &lt;- tags$div( tags$img(src = paste0(&quot;Team_Data/&quot;, name, &quot;.jpg&quot;), height = &quot;100px&quot;, style = &quot;margin-right: 10px; border-radius: 30px;&quot;) ) } else { # If no photo exists, create an HTML div with a user-secret icon photo &lt;- tags$div( icon(&quot;user-secret&quot;, style = &quot;margin-right: 10px; font-size: 50px&quot;) ) } # Return the created HTML div photo }) output$photoOutput &lt;- renderUI({ ... }): This sets up a reactive UI element called photoOutput. The content of this UI element is generated dynamically based on the selected student‚Äôs name. name &lt;- input$student_select: It gets the selected student‚Äôs name from the student_select input. file.exists(paste0(\"www/Team_Data/\", name, \".jpg\")): This checks if a photo file exists for the selected student. It constructs the file path based on the name and checks if the file exists. If a photo exists (if branch): photo &lt;- tags$div(...) creates an HTML div element. tags$img(...) creates an img tag within the div, setting its source (src attribute) to the path of the photo file. Additional styling is applied with height, style attributes. If no photo exists (else branch): photo &lt;- tags$div(...) creates an HTML div element. icon(\"user-secret\", style = \"margin-right: 10px; font-size: 50px\") creates an icon with a user-secret icon from the shiny package, providing additional styling. photo: The final variable photo contains the dynamically generated HTML content (either an image or an icon). The entire photo variable is then returned, and this UI element will display either the photo of the selected student or a user-secret icon if no photo is found. 5.7 Tab Record Finder observeEvent(input$viewButton, { # Remove trailing space from PhotoID input cleaned_photo_id &lt;- str_trim(input$PhotoID, side = &quot;right&quot;) filename &lt;- paste0(&quot;www/&quot;, cleaned_photo_id) if (file.exists(filename)) { output$imageOutput &lt;- renderUI({ tags$div( class = &quot;record_image&quot;, tags$img(src = paste(input$PhotoID), style = &quot;display: block; max-width: 100%; max-height: 50vh&quot;), ) }) toggle(&quot;imageOutput&quot;) } }) observeEvent(input$viewButton, {...}): This observer is triggered when the button with the id viewButton is clicked. Image Loading Logic: cleaned_photo_id &lt;- str_trim(input$PhotoID, side = \"right\"): Removes trailing spaces from the input PhotoID. filename &lt;- paste0(\"www/\", cleaned_photo_id): Creates the file path for the image using the cleaned PhotoID. if (file.exists(filename)) { ... }: Checks if the file exists in the specified path. UI Rendering: If the file exists, it renders a dynamic UI (output$imageOutput) containing an image (tags$img) with the source set to the specified PhotoID. The image is styled to have a maximum width of 100% and a maximum height of 50vh (50% of the viewport height). toggle(\"imageOutput\"): This is likely a custom function to toggle the visibility of the image. "],["next-steps.html", "6 Next Steps 6.1 Error message Record Finder 6.2 Different years different data: 6.3 Data download and clean automation: 6.4 Survey Photos:", " 6 Next Steps Here is a list of things that need to be done: 6.1 Error message Record Finder If the photo ID is incorrect, an error message should be displayed. 6.2 Different years different data: Currently, the dashboard works a dataset containing data for multiple years - I created a fake dataset for the next academic year as a subset of the 2023 data. The data is combined into the all_years.RData. It might be better to have separate datasets and store them in a list, its up to you. The next point will influence this too. 6.3 Data download and clean automation: The pulling and preparing of the data should be made automatic, i.e.¬†everyday during the survey season the data should be pulled from OneDrive, cleaned and uploaded to the dashboard. However, as more data is collected it will probably be better to upload the data to OneDrive (i.e.¬†not host it on your laptop or shiny server) and have the dashboard pull the data from OneDrive. This will also affect how the dashboard accesses separate years data. 6.4 Survey Photos: The same also applies to the photos. It might be better to pull the photos directly from OneDrive in the app. I‚Äôm not sure how to do this and maybe there‚Äôs a different way to store and retrieve the photos. "],["useful-things.html", "7 Useful things 7.1 Reactive Expressions", " 7 Useful things 7.1 Reactive Expressions In Shiny, a reactive expression is a way to create a dynamic and responsive relationship between inputs and outputs. Reactive expressions allow you to create computations that automatically update whenever their dependencies change. This enables real-time, reactive behavior in Shiny applications. Here are key concepts related to Shiny reactive expressions: 7.1.1 1. Reactivity: What is Reactivity? Reactivity is the ability of a Shiny application to automatically respond to changes in input values, triggering updates to the corresponding output elements. 7.1.2 2. Understanding Reactive Expressions: Definition: A reactive expression is a function that contains reactive dependencies. These dependencies are explicitly declared within the function body using reactive functions like reactive(), observe(), eventReactive(), etc. 7.1.3 3. Declaration of Reactive Expressions: reactive(): The reactive() function is used to create a reactive expression. It takes a block of code as an argument, and within that block, you can declare reactive dependencies using reactive functions. my_reactive_expression &lt;- reactive({ # Code with reactive dependencies input$some_input + input$another_input }) 7.1.4 4. Dependency Tracking: Automatic Dependency Tracking: When a reactive expression is created, Shiny automatically tracks the dependencies within the expression. Reactive Functions: Reactive functions, such as input$, reactive(), and others, signal to Shiny that the expression depends on the values they reference. 7.1.5 5. Use in Output Elements: Usage in Outputs: Reactive expressions are commonly used in output elements. For example, you might use a reactive expression to calculate a plot based on user input and then render that plot in the UI. output$my_plot &lt;- renderPlot({ my_reactive_expression() }) 7.1.6 6. Reactivity in observe() and eventReactive(): observe(): The observe() function is used for operations that don‚Äôt return a value but have side effects, like printing to the console or updating a reactiveValues object. observe({ # Code with reactive dependencies cat(&quot;Something happened!\\n&quot;) }) eventReactive(): The eventReactive() function is similar to reactive(), but it only updates when an event occurs. reactive_result &lt;- eventReactive(input$button_click, { # Code with reactive dependencies input$text_input }) 7.1.7 7. Use Cases: Complex Computations: Reactive expressions are useful for encapsulating complex computations that depend on reactive inputs. Preventing Redundant Calculations: They help prevent redundant calculations by only recomputing when their dependencies change. 7.1.8 8. Performance Considerations: Efficiency: While reactive expressions provide a powerful way to create responsive applications, it‚Äôs essential to be mindful of efficiency to prevent unnecessary computations. 7.1.9 9. Reactive Conductors: reactiveVal() and reactiveValues(): These are used to create mutable reactive objects that can be read and modified in reactive contexts. 7.1.10 10. Isolation of Reactivity: isolate(): In some cases, you may want to isolate certain expressions from reactivity to prevent undesired updates. isolated_value &lt;- isolate(input$some_input) In summary, reactive expressions are a fundamental concept in Shiny programming, allowing you to create dynamic and responsive applications by specifying the dependencies between inputs and outputs. They play a crucial role in creating interactive and data-driven user interfaces. "],["404.html", "Page not found", " Page not found The page you requested cannot be found (perhaps it was moved or renamed). You may want to try searching to find the page's new location, or use the table of contents to find the page you are looking for. "]]
